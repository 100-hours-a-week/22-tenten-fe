name: Frontend CI/CD Pipeline

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop

jobs:
  ci:
    name: CI
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kakaobase

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'

      - name: Install Dependencies
        run: npm ci

      - name: Type Check
        run: npm run type-check

      - name: Build Test
        run: npm run build

  cd:
    name: CD
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kakaobase
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine Docker Tag
        id: tag
        run: echo "DOCKER_TAG=dev" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build and push Docker image
        run: |
          FRONTEND_IMAGE_BASE=${{ secrets.ECR_REGISTRY }}/${{ secrets.FRONTEND_REPO }}
          FE_IMAGE_SHA=$FRONTEND_IMAGE_BASE:${{ steps.tag.outputs.DOCKER_TAG }}-${{ github.sha }}
          FE_IMAGE_LATEST=$FRONTEND_IMAGE_BASE:latest
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.DEV_NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }} \
            -t $FE_IMAGE_SHA -t $FE_IMAGE_LATEST .
          docker push $FE_IMAGE_SHA
          docker push $FE_IMAGE_LATEST

      - name: Deploy via SSM (Safe Script Mode)
        run: |
          aws ssm send-command \
          --instance-ids ${{ secrets.DEV_EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy Dev Next.js container" \
          --parameters 'commands=["bash -c '\''\
            set -e; \
            FRONTEND_IMAGE_BASE=${{ secrets.ECR_REGISTRY }}/${{ secrets.FRONTEND_REPO }}; \
            FE_IMAGE_LATEST=$FRONTEND_IMAGE_BASE:latest; \
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $FRONTEND_IMAGE_BASE; \
            docker rmi $FE_IMAGE_LATEST || true; \
            docker pull $FE_IMAGE_LATEST; \
            docker stop next-dev || true; \
            docker rm next-dev || true; \
            docker run -d \
              --name next-dev \
              -p 3000:3000 \
              --restart always \
              --env NODE_ENV=production \
              --env NEXT_PUBLIC_API_URL=${{ secrets.DEV_NEXT_PUBLIC_API_URL }} \
              --env NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }} \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              $FE_IMAGE_LATEST \
          '\''"]' \
          --region ${{ secrets.AWS_REGION }}

  notify:
    name: Discord Notification
    needs: [ci, cd]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Send Discord Notification
        run: |
          if [ "${{ needs.ci.result }}" == "success" ]; then
            STATUS="‚úÖ Next.js CI ÏÑ±Í≥µ"
            COLOR="5763719"
          elif [ "${{ needs.cd.result }}" == "success" ]; then
            STATUS="‚úÖ Next.js CD ÏÑ±Í≥µ"
            COLOR="5763719"          
          elif [ "${{ needs.ci.result }}" != "success" ]; then
            STATUS="‚ùå Next.js CI Ïã§Ìå®"
            COLOR="15158332"
          else
            STATUS="‚ùå Next.js CD Ïã§Ìå®"
            COLOR="15158332"
          fi
          
          curl -X POST -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"$STATUS: ${{ github.workflow }}\",
                \"description\": \"Î∏åÎûúÏπò: \`${{ github.ref_name }}\`\nÏª§Î∞ãÌïú ÏÇ¨Îûå: \`${{ github.actor }}\`\n[üëâ Ïï°ÏÖò Î≥¥Í∏∞](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                \"color\": $COLOR
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          
