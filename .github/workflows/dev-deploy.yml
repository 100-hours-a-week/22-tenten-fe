name: Frontend dev-CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

  setup:
    runs-on: ubuntu-latest
    needs: checkout
    defaults:
      run:
        working-directory: ./kakaobase
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'

      - name: Install Dependencies
        run: npm ci  

      - name: Type Check
        run: npm run type-check 

      - name: Build Test
        run: npm run build

  build:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine Docker Tag
        id: tag
        run: |
          echo "DOCKER_TAG=dev" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build and push Docker image
        working-directory: ./kakaobase
        run: |
          FRONTEND_IMAGE_BASE=${{ secrets.ECR_REGISTRY }}/${{ secrets.FRONTEND_REPO }}
          FE_IMAGE_SHA=$FRONTEND_IMAGE_BASE:${{ steps.tag.outputs.DOCKER_TAG }}-${{ github.sha }}
          FE_IMAGE_LATEST=$FRONTEND_IMAGE_BASE:latest
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.DEV_NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }} \
            -t $FE_IMAGE_SHA -t $FE_IMAGE_LATEST .
          docker push $FE_IMAGE_SHA
          docker push $FE_IMAGE_LATEST
## SSM 배포
      - name: Deploy via SSM (Safe Script Mode)
        run: |
          aws ssm send-command \
          --instance-ids ${{ secrets.DEV_EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy Dev Next.js container" \
          --parameters 'commands=["bash -c '\''\
            set -e; \
            FRONTEND_IMAGE_BASE=${{ secrets.ECR_REGISTRY }}/${{ secrets.FRONTEND_REPO }}; \
            FE_IMAGE_LATEST=$FRONTEND_IMAGE_BASE:latest; \
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $FRONTEND_IMAGE_BASE; \
            docker rmi $FE_IMAGE_LATEST || true; \
            docker pull $FE_IMAGE_LATEST; \
            docker stop next-dev || true; \
            docker rm next-dev || true; \
            docker run -d \
              --name next-dev \
              -p 3000:3000 \
              --restart always \
              --env NODE_ENV=production \
              --env NEXT_PUBLIC_API_URL=${{ secrets.DEV_NEXT_PUBLIC_API_URL }} \
              --env NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }} \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              $FE_IMAGE_LATEST \
          '\''"]' \
          --region ${{ secrets.AWS_REGION }}

  notify:
    name: 📣 Discord Notification
    needs: [setup, build]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Commit Message
        id: get_commit
        run: echo "message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        run: |
          # CI 상태
          CI_RESULT="${{ needs.setup.result }}"
          if [ "$CI_RESULT" = "success" ]; then
            CI_STATUS="✅ CI (setup/build) 성공"
          else
            CI_STATUS="❌ CI (setup/build) 실패"
          fi

          # CD 상태
          CD_RESULT="${{ needs.build.result }}"
          if [ "$CD_RESULT" = "success" ]; then
            CD_STATUS="✅ CD (배포) 성공"
          else
            CD_STATUS="❌ CD (배포) 실패"
          fi

          # 색상 결정 (실패 우선)
          if [ "$CI_RESULT" = "failure" ] || [ "$CD_RESULT" = "failure" ]; then
            COLOR=15158332  # 빨간색
          else
            COLOR=3066993   # 초록색
          fi

          # 커밋 메시지
          COMMIT_MESSAGE="${{ steps.get_commit.outputs.message }}"

          # 디스코드 웹훅 전송
          curl -X POST -H "Content-Type: application/json" \
          -d "{
            \"embeds\": [{
              \"title\": \"🔔 Next.js CI/CD 결과 알림\",
              \"description\": \"${CI_STATUS}\n${CD_STATUS}\n\n 브랜치: \`${{ github.ref_name }}\`\n 커밋자: \`${{ github.actor }}\`\n 커밋 메시지: \`${COMMIT_MESSAGE}\`\n [자세히 보기](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
              \"color\": ${COLOR}
            }]
          }" \
          ${{ secrets.DISCORD_WEBHOOK_URL }}
          
