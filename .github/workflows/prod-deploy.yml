name: Frontend prod-CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # ‚úÖ 1. CI - PR Ïãú Lint, Type Check, Build
  ci:
    name: CI
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kakaobase

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'

      - name: Install Dependencies
        run: npm ci

      - name: Type Check
        run: npm run type-check

      - name: Build Test
        run: npm run build

  # ‚úÖ 2. CD - Push Ïãú Docker build & CodeDeploy
  cd:
    name: CD
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kakaobase

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine Docker Tag
        id: tag
        run: echo "DOCKER_TAG=prod" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          FRONTEND_IMAGE_BASE=${{ secrets.ECR_REGISTRY }}/${{ secrets.FRONTEND_REPO }}
          FE_IMAGE_SHA=$FRONTEND_IMAGE_BASE:${{ steps.tag.outputs.DOCKER_TAG }}-${{ github.sha }}
          FE_IMAGE_LATEST=$FRONTEND_IMAGE_BASE:latest
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.PROD_NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_GOOGLE_ANALYTICS=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }} \
            -t $FE_IMAGE_SHA -t $FE_IMAGE_LATEST .
          docker push $FE_IMAGE_SHA
          docker push $FE_IMAGE_LATEST
          echo "{\"frontendImage\":\"$FE_IMAGE_SHA\", \"ecrRepo\":\"$FRONTEND_IMAGE_BASE\", \"awsRegion\":\"${{ secrets.AWS_REGION }}\", \"prodApiUrl\":\"${{ secrets.PROD_NEXT_PUBLIC_API_URL }}\", \"googleAnalytics\":\"${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }}\"}" > imageDetail.json

      - name: Prepare Deploy Bundle
        run: |
          mkdir -p bundle/scripts
          cp appspec.yml imageDetail.json bundle/
          cp -r scripts/* bundle/scripts/
          cd bundle && zip -r ../fe-deploy.zip . && cd ..

      - name: Upload to S3
        run: aws s3 cp ./fe-deploy.zip s3://${{ secrets.S3_BUCKET }}/fe/fe-deploy.zip

      - name: Determine Deployment Target
        id: target
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "APP_NAME=BlueGreen-FE" >> "$GITHUB_OUTPUT"
            echo "DEPLOY_GROUP=BlueGreen-FE-Group" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF}" =~ ^refs/heads/release/ ]]; then
            echo "APP_NAME=frontend-release" >> "$GITHUB_OUTPUT"
            echo "DEPLOY_GROUP=frontend-release-group" >> "$GITHUB_OUTPUT"
          else
            echo "No deployment target for this branch." >&2
            exit 1
          fi

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ steps.target.outputs.APP_NAME }} \
            --deployment-group-name ${{ steps.target.outputs.DEPLOY_GROUP }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=fe/fe-deploy.zip,bundleType=zip \
            --region ${{ secrets.AWS_REGION }}

  # ‚úÖ 3. Discord Notify
  notify:
    name: Discord Notification
    needs: [ci, cd]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Send Discord Notification
        run: |
          if [ "${{ needs.ci.result }}" == "success" ]; then
            STATUS="‚úÖ Next.js CI ÏÑ±Í≥µ"
            COLOR="5763719"
          elif [ "${{ needs.cd.result }}" == "success" ]; then
            STATUS="‚úÖ Next.js CD ÏÑ±Í≥µ"
            COLOR="5763719"          
          elif [ "${{ needs.ci.result }}" != "success" ]; then
            STATUS="‚ùå Next.js CI Ïã§Ìå®"
            COLOR="15158332"
          else
            STATUS="‚ùå Next.js CD Ïã§Ìå®"
            COLOR="15158332"
          fi
          
          curl -X POST -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"$STATUS: ${{ github.workflow }}\",
                \"description\": \"Î∏åÎûúÏπò: \`${{ github.ref_name }}\`\nÏª§Î∞ãÌïú ÏÇ¨Îûå: \`${{ github.actor }}\`\n[üëâ Ïï°ÏÖò Î≥¥Í∏∞](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                \"color\": $COLOR
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
